using Google.Cloud.SecretManager.V1;
using Microsoft.Extensions.Configuration;
using System;

public class GoogleSecretManagerConfigurationProvider : ConfigurationProvider
{
    private readonly IConfiguration _baseConfig;
    private readonly string _gcpProjectId; // The GCP project containing the secrets

    public GoogleSecretManagerConfigurationProvider(IConfiguration baseConfig, string gcpProjectId)
    {
        _baseConfig = baseConfig;
        _gcpProjectId = gcpProjectId;
    }

    public override void Load()
    {
        // Copy all configuration key-value pairs from the base config at first.
        // We'll overwrite the ones that need secret resolution below.
        foreach (var kvp in _baseConfig.AsEnumerable())
        {
            // kvp.Key might be "ConnectionStrings:DefaultConnection", etc.
            // kvp.Value might be "gcp-secret:MyDatabaseConnectionString" or an actual non-secret value.
            if (!string.IsNullOrEmpty(kvp.Value))
            {
                if (kvp.Value.StartsWith("gcp-secret:", StringComparison.OrdinalIgnoreCase))
                {
                    // e.g. "gcp-secret:MyApiKeyName"
                    string secretId = kvp.Value.Substring("gcp-secret:".Length);

                    // Access the secret from GCP Secret Manager:
                    // This uses the "latest" secret version by default:
                    string resolvedValue = FetchSecretFromGcp(_gcpProjectId, secretId);

                    // Store it in the final Data dictionary:
                    Data[kvp.Key] = resolvedValue;
                }
                else
                {
                    // If the value doesn't start with "gcp-secret:", just copy it as-is.
                    Data[kvp.Key] = kvp.Value;
                }
            }
        }
    }

    private string FetchSecretFromGcp(string projectId, string secretName)
    {
        // Use the Google.Cloud.SecretManager.V1 library
        SecretManagerServiceClient client = SecretManagerServiceClient.Create();
        var secretVersionName = new SecretVersionName(projectId, secretName, "latest");

        AccessSecretVersionResponse result = client.AccessSecretVersion(secretVersionName);

        // The actual secret payload is a byte array, so convert to string:
        return result.Payload.Data.ToStringUtf8();
    }
}
