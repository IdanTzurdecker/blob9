using Google.Cloud.SecretManager.V1;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public class GcpSecretManagerConfigurationProvider : ConfigurationProvider
{
    private readonly SecretManagerServiceClient _client;
    private readonly string _projectId;
    private readonly IConfiguration _configuration;

    public GcpSecretManagerConfigurationProvider(string projectId, IConfiguration configuration)
    {
        _projectId = projectId;
        _client = SecretManagerServiceClient.Create();
        _configuration = configuration;
    }

    public override void Load()
    {
        var newData = new Dictionary<string, string>();

        foreach (var kvp in _configuration.AsEnumerable())
        {
            if (kvp.Value != null && kvp.Value.StartsWith("{GCP_SECRET:"))
            {
                var secretName = kvp.Value.Replace("{GCP_SECRET:", "").Replace("}", "").Trim();
                newData[kvp.Key] = GetSecretValue(secretName).Result ?? throw new Exception($"Secret {secretName} not found in GCP.");
            }
            else
            {
                newData[kvp.Key] = kvp.Value!;
            }
        }

        Data = newData;
    }

    private async Task<string?> GetSecretValue(string secretId)
    {
        try
        {
            var secretVersion = $"projects/{_projectId}/secrets/{secretId}/versions/latest";
            var response = await _client.AccessSecretVersionAsync(new AccessSecretVersionRequest { Name = secretVersion });
            return response.Payload.Data.ToStringUtf8();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching secret {secretId}: {ex.Message}");
            return null;
        }
    }
}
